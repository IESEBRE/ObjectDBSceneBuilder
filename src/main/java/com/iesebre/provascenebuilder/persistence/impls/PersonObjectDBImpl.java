package com.iesebre.provascenebuilder.persistence.impls;

import com.iesebre.provascenebuilder.model.Person;
import com.iesebre.provascenebuilder.persistence.daos.DAO;
import com.iesebre.provascenebuilder.persistence.exceptions.DAOException;
import com.iesebre.provascenebuilder.util.DateUtil;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import java.sql.Date;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;
import java.util.stream.Collectors;

public class PersonObjectDBImpl implements DAO<Person> {

    // Open a database connection
    // (create a new database if it doesn't exist yet):
    private static EntityManagerFactory emf =
            Persistence.createEntityManagerFactory("$objectdb/db/Person.odb");

    public PersonObjectDBImpl() {
        //Per solucionar errors de l'ObjectDB en reflection (https://www.objectdb.com/forum/2132)
        com.objectdb.Enhancer.enhance("com.iesebre.provascenebuilder.persistence.entities.*");

    }

    @Override
    public Person get(Long id) throws DAOException {
        return null;
    }

    @Override
    public List<Person> getAll() throws DAOException {
        EntityManager em = emf.createEntityManager();

        // Retrieve all the Person objects from the database:
        TypedQuery<com.iesebre.provascenebuilder.persistence.entities.Person> query =
                em.createQuery("SELECT p FROM Person p", com.iesebre.provascenebuilder.persistence.entities.Person.class);
        //Create a list of model persons by mapping the stream of persistence persons generated by objectdb
        List<Person> results = query.getResultList().stream().map( p -> transform(p)).collect(Collectors.toList());

        //Foir avoiding duplicates we clear the current database content
        em.getTransaction().begin();
        query.getResultList().stream().forEach(p->em.remove(p));
        em.getTransaction().commit();

        //closing the manager
        em.close();
        return results;
    }

    @Override
    public void save(Person obj) throws DAOException {
        EntityManager em = emf.createEntityManager();

        // Guardo la persona del model de l'aplicació però transformada a entitat de persistència
        em.getTransaction().begin();
        em.persist(transform(obj));
        em.getTransaction().commit();
        em.close();
    }

    @Override
    public void saveAll(List<Person> personData)  throws DAOException{
        EntityManager em = emf.createEntityManager();

        // Guardo la llista de persones del model de l'aplicació però transformades a entitat de persistència
        em.getTransaction().begin();
        personData.stream().forEach(pers -> em.persist(transform(pers)));
        em.getTransaction().commit();
        em.close();
    }


    //Abans de tancar l'aplicació hem de tancar el factory
    public void close() throws DAOException {
        emf.close();
    }

    //Mètode per passar de persona del model a persona de la BD
    public static com.iesebre.provascenebuilder.persistence.entities.Person transform(Person p){
        com.iesebre.provascenebuilder.persistence.entities.Person pers=
                new com.iesebre.provascenebuilder.persistence.entities.Person();
        pers.setCity(p.getCity());
        //Per poder guardar un LocalDate a java.util.Date li hem de restar 1900 a l'any i 1 al mes
        pers.setBirthday(new Date(p.getBirthday().getYear()-1900,
                p.getBirthday().getMonthValue()-1,
                p.getBirthday().getDayOfMonth()));
        pers.setFirstName(p.getFirstName());
        pers.setLastName(p.getLastName());
        pers.setSou(p.getSou());
        pers.setStreet(p.getStreet());
        pers.setPostalCode(p.getPostalCode());
        return pers;
    }

    //Mètode per passar de persona de la BD a persona del model
    public static Person transform(com.iesebre.provascenebuilder.persistence.entities.Person p){
        Person pers=new Person();
        pers.setCity(p.getCity()); //"dd.MM.yyyy"
        //Obtenim el dia mes i any de la java.util.Date
        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"));
        cal.setTime(p.getBirthday());
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        //Per poder guardar una java.util.Date a LocalDate li hem de sumar 1 al mes
        pers.setBirthday(DateUtil.parse(
                String.format("%02d", day)+"."+
                        String.format("%02d", month+1)+"."+
                        String.format("%04d", year)
        ));
        pers.setFirstName(p.getFirstName());
        pers.setLastName(p.getLastName());
        pers.setSou(p.getSou());
        pers.setStreet(p.getStreet());
        pers.setPostalCode(p.getPostalCode());
        return pers;
    }

    @Override
    public void clear() throws DAOException{
        EntityManager em = emf.createEntityManager();

        //em.clear();
        em.getTransaction().begin();
        for(Person p:this.getAll()) em.remove(transform(p));
        em.getTransaction().commit();

        em.close();
    }



}
