package com.iesebre.provascenebuilder.persistence.impls;

import com.iesebre.provascenebuilder.model.Person;
import com.iesebre.provascenebuilder.persistence.daos.DAO;
import com.iesebre.provascenebuilder.persistence.exceptions.DAOException;
import com.iesebre.provascenebuilder.util.DateUtil;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import java.sql.Date;
import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;
import java.util.stream.Collectors;

public class PersonObjectDBImpl implements DAO<Person> {

    // Open a database connection
    // (create a new database if it doesn't exist yet):
    private static EntityManagerFactory emf =
//            Persistence.createEntityManagerFactory("$objectdb/db/Person.odb");
            Persistence.createEntityManagerFactory("db/Person.odb");

    //Usem un sol EntityManager per tindre un sol context de persistència
    private static EntityManager em = emf.createEntityManager();


    //Llista de persones del model de l'aplicació
    private static List<Person> llistaApp = null;

    //Llista de persones del model de persistència
    private static List<com.iesebre.provascenebuilder.persistence.entities.Person> llistaPersist = null;

    public PersonObjectDBImpl() throws DAOException {
        //Per solucionar errors de l'ObjectDB en reflection (https://www.objectdb.com/forum/2132)
        com.objectdb.Enhancer.enhance("com.iesebre.provascenebuilder.persistence.entities.*");

        //Tenim 2 llistes en objectes equivalents a cadascuna d'elles, per tal de no duplicar-los al persistir-los
        llistaPersist = getAllFromDB(); //aquí tenim els objectes recuperats de la BD
        //Create a list of model persons by mapping the stream of persistence persons generated by objectdb
        llistaApp = llistaPersist.stream().map(PersonObjectDBImpl::transform).collect(Collectors.toList()); //aquí tenim els
        //equivalents però transformats al model de l'aplicació

        //Quan vulgue modificar objectes del model també ho faré sobre l'equivalent de la BD, que a l'estar gestionat
        //(managed) automàticament persistiran els canvis, i no generaran duplicats, cosa que si passaria si cada vegada
        //els transformem i creem nous objectes

    }

    @Override
    public Person get(Long id) throws DAOException {
//        try{}catch(Exception e){throw new DAOException(4);}
        return null;
    }

    private List<com.iesebre.provascenebuilder.persistence.entities.Person> getAllFromDB() throws DAOException{
        try {
            // Retrieve all the Person objects from the database:
            TypedQuery<com.iesebre.provascenebuilder.persistence.entities.Person> query =
                    em.createQuery("SELECT p FROM Person p", com.iesebre.provascenebuilder.persistence.entities.Person.class);
            //Return a list of persistence persons generated by objectdb
            return query.getResultList();
        }catch(Exception e){
            throw new DAOException(4);
        }
    }

    @Override
    public List<Person> getAll() throws DAOException {

        //We return the list of model persons created at the instantiation of this implementation
        return llistaApp;
    }

    @Override
    public void save(Person obj) throws DAOException {
        try {
            // Guardo la persona del model de l'aplicació però transformada a entitat de persistència
            em.getTransaction().begin();
            com.iesebre.provascenebuilder.persistence.entities.Person p = copy(obj);
            if (p != null && !em.contains(p)) em.persist(p);
            em.getTransaction().commit();
        }catch(Exception e){
            throw new DAOException(3);
        }
    }

    public void saveAndCopy(Person person) throws DAOException {
        try {
            em.getTransaction().begin();
            com.iesebre.provascenebuilder.persistence.entities.Person p = transform(person);
            llistaApp.add(person);
            llistaPersist.add(p);
            if (p != null && !em.contains(p)) em.persist(p);
            em.getTransaction().commit();
        }catch(Exception e){
            throw new DAOException(3);
        }
    }




    private com.iesebre.provascenebuilder.persistence.entities.Person copy(Person obj) {
        //Busquem l'objecte de l'aplicació canviat dins l'arraylist corresponent
        int trobat = llistaApp.indexOf(obj);
        //Si l'hem trobat recuperrem l'objecte respectiu de la llista de persistència i el modifiquem
        if(trobat!=-1) {
            com.iesebre.provascenebuilder.persistence.entities.Person persistit = llistaPersist.get(trobat);
            com.iesebre.provascenebuilder.persistence.entities.Person transformat= transform(obj);

            //Copiem la info del transformat al persistit, per no duplicar objectes
            persistit.setPostalCode(transformat.getPostalCode());
            persistit.setStreet(transformat.getStreet());
            persistit.setSou(transformat.getSou());
            persistit.setCity(transformat.getCity());
            persistit.setLastName(transformat.getLastName());
            persistit.setFirstName(transformat.getFirstName());
            persistit.setBirthday(transformat.getBirthday());

            return persistit;
        }
        return null;
    }

    @Override
    public void saveAll(List<Person> personData)  throws DAOException{
        try {
            // Guardo la llista de persones del model de l'aplicació però transformades a entitat de persistència
            em.getTransaction().begin();
            personData.stream().map(pers -> copy(pers)).filter(pers -> pers != null && !em.contains(pers)).forEach(pers -> em.persist(pers));
            em.getTransaction().commit();
        }catch(Exception e){
            throw new DAOException(3);
        }
    }


    //Abans de tancar l'aplicació hem de tancar el factory
    public void close() throws DAOException {
        try {
            //closing the manager
            em.close();
            emf.close();
        }catch(Exception e){
            throw new DAOException(2);
        }
    }

    //Mètode per passar de persona del model a persona de la BD
    public static com.iesebre.provascenebuilder.persistence.entities.Person transform(Person p){
        com.iesebre.provascenebuilder.persistence.entities.Person pers=
                new com.iesebre.provascenebuilder.persistence.entities.Person();
        pers.setCity(p.getCity());
        //Per poder guardar un LocalDate a java.util.Date li hem de restar 1900 a l'any i 1 al mes
        pers.setBirthday(new Date(p.getBirthday().getYear()-1900,
                p.getBirthday().getMonthValue()-1,
                p.getBirthday().getDayOfMonth()));
        pers.setFirstName(p.getFirstName());
        pers.setLastName(p.getLastName());
        pers.setSou(p.getSou());
        pers.setStreet(p.getStreet());
        pers.setPostalCode(p.getPostalCode());
        return pers;
    }

    //Mètode per passar de persona de la BD a persona del model
    public static Person transform(com.iesebre.provascenebuilder.persistence.entities.Person p){
        Person pers=new Person();
        pers.setCity(p.getCity()); //"dd.MM.yyyy"
        //Obtenim el dia mes i any de la java.util.Date
        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"));
        cal.setTime(p.getBirthday());
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        //Per poder guardar una java.util.Date a LocalDate li hem de sumar 1 al mes
        pers.setBirthday(DateUtil.parse(
                String.format("%02d", day)+"."+
                        String.format("%02d", month+1)+"."+
                        String.format("%04d", year)
        ));
        pers.setFirstName(p.getFirstName());
        pers.setLastName(p.getLastName());
        pers.setSou(p.getSou());
        pers.setStreet(p.getStreet());
        pers.setPostalCode(p.getPostalCode());
        return pers;
    }

    @Override
    public void clear() throws DAOException{
        try {
            em.getTransaction().begin();
            for (Person p : this.getAll()) em.remove(transform(p));
            em.getTransaction().commit();
        }catch(Exception e){
            throw new DAOException(1);
        }
    }

    @Override
    public boolean remove(Person obj) throws DAOException {
        //Busquem l'objecte de l'aplicació borrat dins l'arraylist corresponent
        int trobat = llistaApp.indexOf(obj);
        //Si l'hem trobat recuperem l'objecte respectiu de la llista de persistència i els borrem els 2
        if(trobat!=-1) {
            com.iesebre.provascenebuilder.persistence.entities.Person borrat=llistaPersist.get(trobat);
            if(em.contains(borrat)){
                try {
                    //Borrem l'objecte de la BD
                    em.getTransaction().begin();
                    em.remove(borrat);
                    em.getTransaction().commit();

                    //Si ha anat bé el borrem de les llistes
                    llistaPersist.remove(trobat);
                    llistaApp.remove(trobat);
                }catch(Exception e){
                    throw new DAOException(1);
                }
                return true;
            }
        }
        return false;
    }

}
